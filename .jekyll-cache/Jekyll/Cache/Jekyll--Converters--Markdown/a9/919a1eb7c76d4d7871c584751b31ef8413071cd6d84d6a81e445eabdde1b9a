I"B6<h1 id="面向对象">面向对象</h1>
<p>java接触过面向对象，主要学习下语法和与java的差异</p>
<h2 id="1-创建类">1、 创建类</h2>
<p>使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Student</span><span class="p">:</span>
    <span class="s">"学生基类"</span>
    <span class="n">studentCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">score</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="n">salary</span>
        <span class="n">Student</span><span class="o">.</span><span class="n">studentCount</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">displayCount</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Total Student </span><span class="si">%</span><span class="s">d"</span> <span class="o">%</span><span class="n">Student</span><span class="o">.</span><span class="n">studentCount</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">displayStudent</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Name:"</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="s">",Score:"</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">score</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><strong>studentCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。可以在内部类或外部类使用 Student.studentCount 访问。</strong></li>
  <li>
    <p><strong>第一种方法__init__()方法是类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法</strong></p>
  </li>
  <li><strong>self 代表类的实例，self 在定义类的方法时是必须有的</strong></li>
</ul>

<h2 id="2创建实例对象">2、创建实例对象</h2>
<p>Python 中没有new这个关键字，类的实例化类似函数调用方式。以下使用类的名称 Student 来实例化，并通过 <strong>init</strong> 方法接收参数</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"创建 Student 类的第一个对象"</span>
<span class="n">stu1</span> <span class="o">=</span> <span class="n">Student</span><span class="p">(</span><span class="s">"yantao"</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span>
<span class="s">"创建 Student 类的第二个对象"</span>
<span class="n">stu2</span> <span class="o">=</span> <span class="n">Student</span><span class="p">(</span><span class="s">"dji"</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>
<h2 id="3-访问添加修改删除属性">3、 访问、添加、修改、删除属性</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stu1</span><span class="o">.</span><span class="n">displayStudent</span><span class="p">()</span>
<span class="n">stu2</span><span class="o">.</span><span class="n">displayStudent</span><span class="p">()</span>

<span class="n">stu1</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="err">添加对象属性</span>
<span class="n">stu1</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">26</span><span class="p">;</span><span class="err">添加对象属性</span>
<span class="k">del</span> <span class="n">stu1</span><span class="o">.</span><span class="n">age</span> <span class="p">;</span><span class="err">添加对象属性</span>
</code></pre></div></div>
<p>输出结果：
<img src="https://img-blog.csdnimg.cn/20191130214709741.png" alt="在这里插入图片描述" /></p>
<h2 id="4python对象销毁垃圾回收">4、python对象销毁(垃圾回收)</h2>
<p>引用计数法+循环垃圾收集器
在 Python 内部记录着所有使用中的对象各有多少引用。一个内部跟踪变量，称为一个引用计数器。当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是”立即”的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。</p>
<h2 id="5类的继承">5、类的继承</h2>
<p>通过继承创建的新类称为子类或派生类，被继承的类称为基类、父类或超类
在python中继承中的一些特点：</p>

<ol>
  <li>如果在子类中需要父类的构造方法就需要显示的调用父类的构造方法，或者不重写父类的构造方法。</li>
  <li>在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数</li>
  <li>Python是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）</li>
  <li><strong>python支持多继承</strong></li>
</ol>

<p>语法：
 派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，多继承格式如下：
 class SubClassName (ParentClass1,ParentClass2, …):</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Parent</span><span class="p">:</span>  <span class="c1"># 定义父类
</span>    <span class="n">parentAttr</span> <span class="o">=</span> <span class="mi">100</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"调用父类构造函数"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">parentMethod</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'调用父类方法'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">setAttr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">):</span>
        <span class="n">Parent</span><span class="o">.</span><span class="n">parentAttr</span> <span class="o">=</span> <span class="n">attr</span>

    <span class="k">def</span> <span class="nf">getAttr</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"父类属性 :"</span><span class="p">,</span> <span class="n">Parent</span><span class="o">.</span><span class="n">parentAttr</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Parent</span><span class="p">):</span>  <span class="c1"># 定义子类
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"调用子类构造方法"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">childMethod</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'调用子类方法'</span><span class="p">)</span>


<span class="n">c</span> <span class="o">=</span> <span class="n">Child</span><span class="p">()</span>  <span class="c1"># 实例化子类
</span><span class="n">c</span><span class="o">.</span><span class="n">childMethod</span><span class="p">()</span>  <span class="c1"># 调用子类的方法
</span><span class="n">c</span><span class="o">.</span><span class="n">parentMethod</span><span class="p">()</span>  <span class="c1"># 调用父类方法
</span><span class="n">c</span><span class="o">.</span><span class="n">setAttr</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>  <span class="c1"># 再次调用父类的方法 - 设置属性值
</span><span class="n">c</span><span class="o">.</span><span class="n">getAttr</span><span class="p">()</span>  <span class="c1"># 再次调用父类的方法 - 获取属性值
</span></code></pre></div></div>
<p><strong>输出结果：</strong>
 <img src="https://img-blog.csdnimg.cn/2019120122110697.png" alt="在这里插入图片描述" /></p>

<h2 id="6方法重写">6、方法重写</h2>
<p>子类中重写父类方法</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Parent</span><span class="p">:</span>  <span class="c1"># 定义父类
</span>    <span class="k">def</span> <span class="nf">myMethod</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'调用父类方法'</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Parent</span><span class="p">):</span>  <span class="c1"># 定义子类
</span>    <span class="k">def</span> <span class="nf">myMethod</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'调用子类方法'</span><span class="p">)</span>


<span class="n">c</span> <span class="o">=</span> <span class="n">Child</span><span class="p">()</span>  <span class="c1"># 子类实例
</span><span class="n">c</span><span class="o">.</span><span class="n">myMethod</span><span class="p">()</span>  <span class="c1"># 子类调用重写方法
</span></code></pre></div></div>
<p><strong>输出结果：</strong>
<img src="https://img-blog.csdnimg.cn/20191201222526987.png" alt="在这里插入图片描述" /></p>
<h2 id="7类属性与方法">7、类属性与方法</h2>

<p>单下划线、双下划线、头尾双下划线说明：</p>

<ul>
  <li><strong>foo</strong>: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong>init</strong>() 之类的。</li>
  <li>_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *</li>
  <li>_ <em>foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了（self.</em> _foo）。</li>
  <li>类的方法</li>
  <li>在类的内部，使用 def 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">class</span> <span class="nc">JustCounter</span><span class="p">:</span>
    <span class="n">__secretCount</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># 私有变量
</span>    <span class="n">publicCount</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># 公开变量
</span>
    <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">__secretCount</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">publicCount</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__secretCount</span><span class="p">)</span>


<span class="n">counter</span> <span class="o">=</span> <span class="n">JustCounter</span><span class="p">()</span>
<span class="n">counter</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
<span class="n">counter</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">counter</span><span class="o">.</span><span class="n">publicCount</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">counter</span><span class="o">.</span><span class="n">__secretCount</span><span class="p">)</span>  <span class="c1"># 报错，实例不能访问私有变量
</span></code></pre></div></div>
<p><strong>输出结果：</strong>
<img src="https://img-blog.csdnimg.cn/20191201224542817.png" alt="在这里插入图片描述" /></p>
:ET